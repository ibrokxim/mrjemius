<?php
namespace App\Telegram\Handlers;

use App\Models\User;
use App\Models\Category;
use App\Services\CartService;
use Telegram\Bot\Keyboard\Keyboard;
use Telegram\Bot\Laravel\Facades\Telegram;
use App\Telegram\Keyboards\MainMenuKeyboard;

class MenuHandler extends BaseHandler
{
    public function handle(): void
    {
        switch ($this->text) {
            case '/start':
                $this->handleStart();
                break;

            case '/catalog':
            case 'üõç –ö–∞—Ç–∞–ª–æ–≥':
                self::showCategories($this->chatId);
                break;

            case '/cart':
            case 'üõí –ö–æ—Ä–∑–∏–Ω–∞':
                $this->showCart();
                break;

            case '/myorders':
            case 'üë§ –ú–æ–∏ –∑–∞–∫–∞–∑—ã':
                $this->showMyOrders(1);
                break;
            case 'üîç –ü–æ–∏—Å–∫':
            case '/search': // –î–æ–±–∞–≤–∏–º –∏ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –Ω–∞ –±—É–¥—É—â–µ–µ
                $this->handleSearchRequest();
                break;

            case '/support':
            case 'üìû –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å':
                $this->handleFeedback(); // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –¥–ª—è "–û–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"
                break;

            default:
                break;

        }
    }

    protected function handleStart(): void
    {
        Telegram::sendMessage([
            'chat_id' => $this->chatId,
            'text' => "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {$this->user->name}! üëã",
            'reply_markup' => MainMenuKeyboard::build(),
        ]);
    }

    public static function showCategories(int $chatId): void
    {
        $categories = Category::whereNull('parent_id')->where('is_active', true)->get();

        if ($categories->isEmpty()) {
            Telegram::sendMessage(['chat_id' => $chatId, 'text' => '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.']);
            return;
        }

        $keyboard = Keyboard::make()->inline();
        foreach ($categories as $category) {
            $keyboard->row([
                Keyboard::inlineButton(['text' => $category->name, 'callback_data' => 'category_' . $category->id]),
            ]);
        }

        Telegram::sendMessage([
            'chat_id' => $chatId,
            'text' => '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
            'reply_markup' => $keyboard,
        ]);
    }

    protected function handleFeedback(): void
    {
        $text = "üìû *–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏:*\n\n";
        $text .= "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞–º –Ω–∞–ø—Ä—è–º—É—é –ø–æ –Ω–æ–º–µ—Ä—É:\n`+998 77 132 77 00`\n\n";
        $text .= "–õ–∏–±–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É –Ω–∞–ø—Ä—è–º—É—é –≤ Telegram –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:\n";
        $text .= "‚û°Ô∏è **[@mrdjemiuszerouz](https://t.me/mrdjemiuszerouz)**"; // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É

        Telegram::sendMessage([
            'chat_id' => $this->chatId,
            'text' => $text,
            'parse_mode' => 'Markdown', // –£–∫–∞–∑—ã–≤–∞–µ–º Markdown –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–æ–∫ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            'disable_web_page_preview' => true, // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–∫–∏ –¥–ª—è –±–æ–ª–µ–µ —á–∏—Å—Ç–æ–≥–æ –≤–∏–¥–∞
        ]);
    }

    public function showCart(bool $isEdit = false, ?int $messageId = null): void
    {
        auth()->login($this->user);
        $summary = (new CartService())->getSummary();
        auth()->logout();

        if ($summary['count'] === 0) {
            $text = '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.';
            if ($isEdit && $messageId) {
                Telegram::editMessageText(['chat_id' => $this->chatId, 'message_id' => $messageId, 'text' => $text, 'reply_markup' => null]);
            } else {
                Telegram::sendMessage(['chat_id' => $this->chatId, 'text' => $text]);
            }
            return;
        }

        $text = "üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:*\n\n";
        $keyboard = Keyboard::make()->inline();

        foreach ($summary['items'] as $item) {
            $productName = $item->product->getTranslation('name', 'ru');
            $text .= "‚ñ™Ô∏è *{$productName}*\n";
            $text .= "    `" . number_format($item->product->price * $item->quantity, 0, '.', ' ') . " —Å—É–º`\n";

            $keyboard->row([
                Keyboard::inlineButton(['text' => '‚ûñ', 'callback_data' => 'cart_decrease_' . $item->id]),
                Keyboard::inlineButton(['text' => "{$item->quantity} —à—Ç.", 'callback_data' => 'noop']),
                Keyboard::inlineButton(['text' => '‚ûï', 'callback_data' => 'cart_increase_' . $item->id]),
                Keyboard::inlineButton(['text' => '‚ùå', 'callback_data' => 'cart_remove_' . $item->id]),
            ]);
        }

        $text .= "\n\n*–°—É–º–º–∞ —Ç–æ–≤–∞—Ä–æ–≤:* " . number_format($summary['subtotal'], 0, '.', ' ') . " —Å—É–º";
        $text .= "\n\n*–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É:*\n";
        if ($summary['shipping'] > 0) {
            $text .= "`" . number_format($summary['baseShippingCost'], 0, '.', ' ') . " —Å—É–º`\n";
        } else {
            $text .= "`–ë–µ—Å–ø–ª–∞—Ç–Ω–æ`\n";
        }
        $text .= "_(–°—É–º–º–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –±–æ–ª—å—à–æ–π –∫–æ–ª—å—Ü–µ–≤–æ–π, –æ–ø–ª–∞—Ç–∞ –∫—É—Ä—å–µ—Ä—É –Ω–∞–ª–∏—á–Ω—ã–º–∏)_\n";
        $text .= "\n\n*–ò—Ç–æ–≥–æ –∫ –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–µ:* " . number_format($summary['total'], 0, '.', ' ') . " —Å—É–º";


        $keyboard->row([Keyboard::inlineButton(['text' => '‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', 'callback_data' => 'checkout_start'])]);
        $keyboard->row([Keyboard::inlineButton(['text' => 'üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É', 'callback_data' => 'cart_clear'])]);
        $keyboard->row([Keyboard::inlineButton(['text' => 'üõç –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏', 'callback_data' => 'back_to_categories'])]);

        $params = [
            'chat_id' => $this->chatId,
            'text' => $text,
            'parse_mode' => 'Markdown',
            'reply_markup' => $keyboard,
        ];

        if ($isEdit && $messageId) {
            try {
                Telegram::editMessageText(array_merge($params, ['message_id' => $messageId]));
            } catch (\Exception $e) { /* –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è */ }
        } else {
            Telegram::sendMessage($params);
        }
    }

    public function showMyOrders(int $page = 1): void
    {
        $perPage = 5;

        $orders = $this->user->orders()
            ->latest()
            ->paginate($perPage, ['*'], 'page', $page);

        if ($orders->isEmpty() && $page === 1) {
            Telegram::sendMessage(['chat_id' => $this->chatId, 'text' => '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.']);
            return;
        }

        $text = "üë§ *–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏.";
        $keyboard = Keyboard::make()->inline();

        foreach ($orders as $order) {
            $statusIcon = $this->getStatusIcon($order->status);
            $date = $order->created_at->format('d.m.Y');
            $buttonText = "{$statusIcon} –ó–∞–∫–∞–∑ ‚Ññ{$order->order_number} –æ—Ç {$date}";
            $keyboard->row([
                Keyboard::inlineButton(['text' => $buttonText, 'callback_data' => 'order_details_' . $order->id])
            ]);
        }

        // --- –ë–õ–û–ö –ü–ê–ì–ò–ù–ê–¶–ò–ò ---
        $paginationRow = [];
        if ($orders->previousPageUrl()) {
            $paginationRow[] = Keyboard::inlineButton(['text' => '‚óÄÔ∏è', 'callback_data' => 'orders_page_' . ($page - 1)]);
        }
        if ($orders->hasMorePages()) {
            $paginationRow[] = Keyboard::inlineButton(['text' => '‚ñ∂Ô∏è', 'callback_data' => 'orders_page_' . ($page + 1)]);
        }
        if (!empty($paginationRow)) {
            $keyboard->row($paginationRow);
        }

        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (—Ç.–µ. –º—ã –ø—Ä–∏—à–ª–∏ –ø–æ –∫–Ω–æ–ø–∫–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏), —Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
        if ($page > 1 || $this->callbackData) { // $this->callbackData - –ø—Ä–∏–∑–Ω–∞–∫ —Ç–æ–≥–æ, —á—Ç–æ –º—ã –ø—Ä–∏—à–ª–∏ –ø–æ –∫–Ω–æ–ø–∫–µ
            Telegram::editMessageText([
                'chat_id' => $this->chatId,
                'message_id' => $this->messageId,
                'text' => $text,
                'parse_mode' => 'Markdown',
                'reply_markup' => $keyboard,
            ]);
        } else {
            Telegram::sendMessage([
                'chat_id' => $this->chatId,
                'text' => $text,
                'parse_mode' => 'Markdown',
                'reply_markup' => $keyboard,
            ]);
        }
    }

    public function getStatusIcon(string $status): string
    {
        return match ($status) {
            'pending' => 'üïí',
            'processing' => '‚öôÔ∏è',
            'shipped' => 'üöö',
            'delivered' => '‚úÖ',
            'cancelled' => '‚ùå',
            default => 'üìÑ',
        };
    }

    protected function handleSearchRequest(): void
    {
        $this->setState('awaiting_search_query');

        Telegram::sendMessage([
            'chat_id' => $this->chatId,
            'text' => '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:',
        ]);
    }
}
