<?php
namespace App\Telegram\Handlers;

use App\Models\Category;
use App\Models\User;
use App\Services\CartService;
use App\Telegram\Keyboards\MainMenuKeyboard;
use Telegram\Bot\Keyboard\Keyboard;
use Telegram\Bot\Laravel\Facades\Telegram;

class MenuHandler extends BaseHandler
{
    public function handle(): void
    {
        switch ($this->text) {
            case '/start':
                $this->handleStart();
                break;

            case 'üõç –ö–∞—Ç–∞–ª–æ–≥':
                self::showCategories($this->chatId);
                break;
            case 'üõí –ö–æ—Ä–∑–∏–Ω–∞':
                $this->showCart();
                break;

            case 'üìû –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å':
                $this->handleFeedback(); // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –¥–ª—è "–û–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"
                break;

            default:
                // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
                $this->forwardMessageToManager();
                break;

            // –î—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –±—É–¥—É—Ç –∑–¥–µ—Å—å
        }
    }

    protected function handleStart(): void
    {
       // User::updateOrCreate(['telegram_id' => $this->chatId], ['name' => $this->update['message']['from']['first_name'] ?? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å']);

        Telegram::sendMessage([
            'chat_id' => $this->chatId,
            'text' => "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {$this->user->name}! üëã",
            'reply_markup' => MainMenuKeyboard::build(),
        ]);
    }

    public static function showCategories(int $chatId): void
    {
        $categories = Category::whereNull('parent_id')->where('is_active', true)->get();

        if ($categories->isEmpty()) {
            Telegram::sendMessage(['chat_id' => $chatId, 'text' => '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.']);
            return;
        }

        $keyboard = Keyboard::make()->inline();
        foreach ($categories as $category) {
            $keyboard->row([
                Keyboard::inlineButton(['text' => $category->name, 'callback_data' => 'category_' . $category->id]),
            ]);
        }

        Telegram::sendMessage([
            'chat_id' => $chatId,
            'text' => '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
            'reply_markup' => $keyboard,
        ]);
    }

    protected function handleAbout(): void
    {
        $text = "<b>Mr. Djemius Zero</b> - —ç—Ç–æ –º–∞–≥–∞–∑–∏–Ω –≤–∫—É—Å–Ω—ã—Ö –∏ –ø–æ–ª–µ–∑–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –±–µ–∑ —Å–∞—Ö–∞—Ä–∞!\n\n";
        $text .= "–ù–∞—à —Å–∞–π—Ç: mrdjemiuszero.uz\n";
        $text .= "–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏: +998 77 132 77 00";

        Telegram::sendMessage([
            'chat_id' => $this->chatId,
            'text' => $text,
            'parse_mode' => 'HTML',
        ]);
    }

    protected function handleFeedback(): void
    {
        $text = "üìû *–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏:*\n\n";
        $text .= "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞–º –Ω–∞–ø—Ä—è–º—É—é –ø–æ –Ω–æ–º–µ—Ä—É:\n`+998 77 132 77 00`\n\n";
        $text .= "–õ–∏–±–æ, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –º—ã –≤–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–ª–∏, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç –≤–∞—à–µ **–∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞**.";

        Telegram::sendMessage([
            'chat_id' => $this->chatId,
            'text' => $text,
            'parse_mode' => 'Markdown',
        ]);
    }

    protected function forwardMessageToManager(): void
    {
        $user = User::where('telegram_id', $this->chatId)->first();
        if (!$user) return; // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

        $adminChatId = env('TELEGRAM_ADMIN_CHAT_ID');
        if (!$adminChatId) return;

        $notificationText = "üí¨ *–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞!*\n\n";
        $notificationText .= "*–û—Ç:* {$user->name} (`{$user->telegram_id}`)\n";
        $notificationText .= "*–°–æ–æ–±—â–µ–Ω–∏–µ:* {$this->text}";

        Telegram::sendMessage(['chat_id' => $adminChatId, 'text' => $notificationText, 'parse_mode' => 'Markdown']);
        Telegram::sendMessage(['chat_id' => $this->chatId, 'text' => "–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ."]);
    }

    public function showCart(bool $isEdit = false, ?int $messageId = null): void
    {
        auth()->login($this->user);
        $summary = (new CartService())->getSummary();
        auth()->logout();

        if ($summary['count'] === 0) {
            $text = '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.';
            // –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if ($isEdit && $messageId) {
                Telegram::editMessageText(['chat_id' => $this->chatId, 'message_id' => $messageId, 'text' => $text, 'reply_markup' => null]);
            } else {
                Telegram::sendMessage(['chat_id' => $this->chatId, 'text' => $text]);
            }
            return;
        }

        $text = "üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:*\n\n";
        $keyboard = Keyboard::make()->inline();

        foreach ($summary['items'] as $item) {
            $productName = $item->product->getTranslation('name', 'ru');
            $text .= "‚ñ™Ô∏è *{$productName}*\n";
            $text .= "    `" . number_format($item->product->price * $item->quantity, 0, '.', ' ') . " —Å—É–º`\n";

            // --- –ö–ù–û–ü–ö–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –î–õ–Ø –ö–ê–ñ–î–û–ì–û –¢–û–í–ê–†–ê ---
            $keyboard->row([
                Keyboard::inlineButton(['text' => '‚ûñ', 'callback_data' => 'cart_decrease_' . $item->id]),
                Keyboard::inlineButton(['text' => "{$item->quantity} —à—Ç.", 'callback_data' => 'noop']),
                Keyboard::inlineButton(['text' => '‚ûï', 'callback_data' => 'cart_increase_' . $item->id]),
                Keyboard::inlineButton(['text' => '‚ùå', 'callback_data' => 'cart_remove_' . $item->id]),
            ]);
        }

        $text .= "\n\n*–°—É–º–º–∞ —Ç–æ–≤–∞—Ä–æ–≤:* " . number_format($summary['subtotal'], 0, '.', ' ') . " —Å—É–º";
        $text .= "\n\n*–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É:*\n";
        if ($summary['shipping'] > 0) {
            $text .= "`" . number_format($summary['baseShippingCost'], 0, '.', ' ') . " —Å—É–º`\n";
        } else {
            $text .= "`–ë–µ—Å–ø–ª–∞—Ç–Ω–æ`\n";
        }
        $text .= "_(–°—É–º–º–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –±–æ–ª—å—à–æ–π –∫–æ–ª—å—Ü–µ–≤–æ–π, –æ–ø–ª–∞—Ç–∞ –∫—É—Ä—å–µ—Ä—É –Ω–∞–ª–∏—á–Ω—ã–º–∏)_\n";
        $text .= "\n\n*–ò—Ç–æ–≥–æ –∫ –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–µ:* " . number_format($summary['total'], 0, '.', ' ') . " —Å—É–º";

        // --- –û–ë–©–ò–ï –ö–ù–û–ü–ö–ò –ö–û–†–ó–ò–ù–´ ---
        $keyboard->row([Keyboard::inlineButton(['text' => '‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', 'callback_data' => 'checkout_start'])]);
        $keyboard->row([Keyboard::inlineButton(['text' => 'üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É', 'callback_data' => 'cart_clear'])]);
        $keyboard->row([Keyboard::inlineButton(['text' => 'üõç –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏', 'callback_data' => 'back_to_categories'])]);

        $params = [
            'chat_id' => $this->chatId,
            'text' => $text,
            'parse_mode' => 'Markdown',
            'reply_markup' => $keyboard,
        ];

        if ($isEdit && $messageId) {
            try {
                Telegram::editMessageText(array_merge($params, ['message_id' => $messageId]));
            } catch (\Exception $e) { /* –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è */ }
        } else {
            Telegram::sendMessage($params);
        }
    }

}
