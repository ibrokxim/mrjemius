<?php

namespace App\Telegram\Handlers;

use App\Models\Address;
use App\Models\Order;
use App\Models\OrderItem;
use App\Services\CartService;
use App\Services\TelegramService as NotificationService;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Telegram\Bot\Keyboard\Keyboard;
use Telegram\Bot\Laravel\Facades\Telegram;

class CheckoutHandler extends BaseHandler
{

    public function handle(): void
    {
        $parts = explode('_', $this->callbackData);
        $step = $parts[1] ?? null;

        switch ($step) {
            case 'start': $this->start(); break;
            case 'address': $this->handleAddressSelection($parts[2] ?? null); break;
            case 'date': $this->handleDateSelection($parts[2] ?? null); break;
            case 'payment':
                $methodParts = array_slice($parts, 2);
                $method = implode('_', $methodParts);
                $this->handlePaymentMethod($method);
                break;
            case 'confirm': $this->createOrder(); break;
            case 'cancel': $this->cancelCheckout(); break;
        }
    }

    public function start(): void
    {
        $this->setContext(['delivery_method' => 'delivery']);

        try {
            Telegram::deleteMessage(['chat_id' => $this->chatId, 'message_id' => $this->messageId]);
        } catch (\Exception $e) {}

        $this->askForAddress();
    }


    public function askForAddress(): void
    {
        $this->setState('checkout_awaiting_address');

        $addresses = $this->user->addresses()->latest()->take(3)->get();
        $keyboard = Keyboard::make()->inline();

        foreach ($addresses as $address) {
            $keyboard->row([Keyboard::inlineButton([
                'text' => "üìç {$address->address_line_1}, {$address->city}",
                'callback_data' => 'checkout_address_' . $address->id
            ])]);
        }

        $keyboard->row([Keyboard::inlineButton(['text' => '‚ûï –£–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å', 'callback_data' => 'checkout_address_new'])]);
        $keyboard->row([Keyboard::inlineButton(['text' => '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ', 'callback_data' => 'checkout_cancel'])]);

        Telegram::sendMessage([
            'chat_id' => $this->chatId,
            'text' => '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π:',
            'reply_markup' => $keyboard
        ]);
    }

    public function handleAddressSelection($addressId): void
    {
        try { Telegram::deleteMessage(['chat_id' => $this->chatId, 'message_id' => $this->messageId]); } catch (\Exception $e) {}

        if ($addressId === 'new') {
            $this->askForNewAddressContact();
        } else {
            $context = $this->getContext();
            $context['address_id'] = $addressId;
            $this->setContext($context);
            $this->askForDeliveryDate();
        }
    }

    public function askForNewAddressContact(): void
    {
        $this->setState('checkout_awaiting_phone');
        $keyboard = Keyboard::make()
            ->row([Keyboard::button(['text' => 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 'request_contact' => true])])
            ->setResizeKeyboard(true)->setOneTimeKeyboard(true);

        Telegram::sendMessage([
            'chat_id' => $this->chatId,
            'text' => "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–∞—à–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º.\n\n–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –≤ —á–∞—Ç.",
            'reply_markup' => $keyboard
        ]);
    }

    public function askForNewAddressText(): void
    {
        $this->setState('checkout_awaiting_address_text');
        Telegram::sendMessage([
            'chat_id' => $this->chatId,
            'text' => "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`–ì–æ—Ä–æ–¥, –£–ª–∏—Ü–∞, –î–æ–º, –ö–≤–∞—Ä—Ç–∏—Ä–∞`",
            'parse_mode' => 'Markdown',
            'reply_markup' => json_encode(['remove_keyboard' => true]),
        ]);
    }

    public function askForDeliveryDate(): void
    {
        $this->setState('checkout_awaiting_date');
        setlocale(LC_TIME, 'ru_RU.UTF-8');
        $today = now();
        $tomorrow = now()->addDay();
        $dayAfter = now()->addDays(2);

        $keyboard = Keyboard::make()->inline()->row([
            Keyboard::inlineButton(['text' => '–°–µ–≥–æ–¥–Ω—è, ' . $today->isoFormat('D MMM'), 'callback_data' => 'checkout_date_' . $today->format('Y-m-d')]),
            Keyboard::inlineButton(['text' => '–ó–∞–≤—Ç—Ä–∞, ' . $tomorrow->isoFormat('D MMM'), 'callback_data' => 'checkout_date_' . $tomorrow->format('Y-m-d')]),
            Keyboard::inlineButton(['text' => '–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞, ' . $dayAfter->isoFormat('D MMM'), 'callback_data' => 'checkout_date_' . $dayAfter->format('Y-m-d')]),
        ])->row([Keyboard::inlineButton(['text' => '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ', 'callback_data' => 'checkout_cancel'])]);

        Telegram::sendMessage([
            'chat_id' => $this->chatId,
            'text' => '–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:',
            'reply_markup' => $keyboard
        ]);
    }

    public function handleDateSelection(?string $date): void
    {
        if (!$date) return;
        try { Telegram::deleteMessage(['chat_id' => $this->chatId, 'message_id' => $this->messageId]); } catch (\Exception $e) {}

        $context = $this->getContext();
        $context['delivered_at'] = $date;
        $this->setContext($context);

        $this->askForPaymentMethod(); // <-- –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –æ–ø–ª–∞—Ç—ã
    }


    public function askForPaymentMethod(): void
    {
        $this->setState('checkout_awaiting_payment');

        $keyboard = Keyboard::make()->inline()->row([
            Keyboard::inlineButton(['text' => 'üíµ –ù–∞–ª–∏—á–Ω—ã–º–∏', 'callback_data' => 'checkout_payment_cash']),
            Keyboard::inlineButton(['text' => 'üí≥ –ö–∞—Ä—Ç–æ–π –æ–Ω–ª–∞–π–Ω (Payme)', 'callback_data' => 'checkout_payment_card_online']),
        ])->row([Keyboard::inlineButton(['text' => '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ', 'callback_data' => 'checkout_cancel'])]);
        Telegram::sendMessage(['chat_id' => $this->chatId, 'text' => '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:', 'reply_markup' => $keyboard]);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã.
     */
    public function handlePaymentMethod(?string $method): void
    {
        if (!$method) return;
        try { Telegram::deleteMessage(['chat_id' => $this->chatId, 'message_id' => $this->messageId]); } catch (\Exception $e) {}

        $context = $this->getContext();
        $context['payment_method'] = $method;
        $this->setContext($context);

        $this->showConfirmation();
    }

    /**
     * –®–ê–ì 5: –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
     */
    public function showConfirmation(): void
    {
        $this->setState(null);
        $context = $this->getContext();
        auth()->login($this->user);
        $cartSummary = (new CartService())->getSummary();
        auth()->logout();
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
        $text = "üîé *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑*\n\n";
        $text .= "*–¢–æ–≤–∞—Ä—ã –Ω–∞ —Å—É–º–º—É:* " . number_format($cartSummary['subtotal'], 0, '.', ' ') . " —Å—É–º\n";
        $text .= "*–î–æ—Å—Ç–∞–≤–∫–∞:* " . number_format($cartSummary['shipping'], 0, '.', ' ') . " —Å—É–º\n";
        $text .= "*–ò—Ç–æ–≥–æ:* " . number_format($cartSummary['total'], 0, '.', ' ') . " —Å—É–º\n\n";
        $text .= "‚ûñ‚ûñ‚ûñ\n\n";

        // –î–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
        if (isset($context['address_id'])) {
            $address = Address::find($context['address_id']);
            $text .= "*–ê–¥—Ä–µ—Å:* {$address->full_text}\n";
            $text .= "*–¢–µ–ª–µ—Ñ–æ–Ω:* {$address->phone_number}\n";
        } else {
            $text .= "*–ê–¥—Ä–µ—Å:* {$context['new_address_text']}\n";
            $text .= "*–¢–µ–ª–µ—Ñ–æ–Ω:* {$context['phone_number']}\n";
        }

        // –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
        $paymentMethodText = $context['payment_method'] === 'cash' ? 'üíµ –ù–∞–ª–∏—á–Ω—ã–º–∏' : 'üí≥ –ö–∞—Ä—Ç–æ–π –æ–Ω–ª–∞–π–Ω';
        $text .= "*–û–ø–ª–∞—Ç–∞:* {$paymentMethodText}\n";

        $keyboard = Keyboard::make()->inline()->row([
            Keyboard::inlineButton(['text' => '‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ, –æ—Ñ–æ—Ä–º–∏—Ç—å', 'callback_data' => 'checkout_confirm']),
            Keyboard::inlineButton(['text' => '‚ùå –û—Ç–º–µ–Ω–∞', 'callback_data' => 'checkout_cancel']),
        ]);
        Telegram::sendMessage(['chat_id' => $this->chatId, 'text' => $text, 'parse_mode' => 'Markdown', 'reply_markup' => $keyboard]);
    }

    /**
     * –®–ê–ì 6: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
     */
    public function createOrder(): void
    {
        Log::info('[Checkout] –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–í—Å–µ –≤–µ—Ä–Ω–æ, –æ—Ñ–æ—Ä–º–∏—Ç—å". –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞.');

        $context = $this->getContext();
        $user = $this->user;
        Log::info('[Checkout] –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–µ–Ω—ã. User ID: ' . $user->id);

        auth()->login($user);
        $cartService = new CartService();
        $cartSummary = $cartService->getSummary();
        $cartItems = $cartService->getItems();
        auth()->logout();
        Log::info('[Checkout] –ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—É—á–µ–Ω–∞. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: ' . $cartItems->count());

        if ($cartItems->isEmpty()) {
            Log::warning('[Checkout] –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ø—Ä–µ—Ä—ã–≤–∞–µ–º—Å—è.');
            // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è (—Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ) - –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ.
            try {
                Telegram::editMessageText(['chat_id' => $this->chatId, 'message_id' => $this->messageId, 'text' => '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.']);
            } catch (\Exception $e) {
                Telegram::sendMessage(['chat_id' => $this->chatId, 'text' => '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.']);
            }
            return;
        }

        $order = null;
        Log::info('[Checkout] –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.');
        DB::beginTransaction();
        try {
            $shippingAddressId = $context['address_id'] ?? null;
            Log::info('[Checkout] ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞: ' . ($shippingAddressId ?? '–Ω–µ —É–∫–∞–∑–∞–Ω'));

            if (isset($context['new_address_text']) && isset($context['phone_number'])) {
                Log::info('[Checkout] –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å. –°–æ–∑–¥–∞–µ–º –µ–≥–æ.');
                $addressParts = explode(',', $context['new_address_text'], 2);
                $city = trim($addressParts[0]);
                $addressLine1 = trim($addressParts[1] ?? $city);

                $newAddress = Address::create([
                    'user_id' => $user->id, 'type' => 'shipping', 'full_name' => $user->name,
                    'phone_number' => $context['phone_number'], 'address_line_1' => $addressLine1,
                    'city' => $city, 'country_code' => 'UZ', 'is_default' => false, 'postal_code' => '000000',
                ]);
                $shippingAddressId = $newAddress->id;
            }

            Log::info('[Checkout] –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –∑–∞–∫–∞–∑–∞ (Order).');
            $order = Order::create([
                'order_number' => 'ORD-BOT-' . time() . '-' . $user->id,
                'user_id' => $user->id,
                'shipping_address_id' => $shippingAddressId,
                'status' => 'pending', 'payment_status' => 'pending',
                'subtotal_amount' => $cartSummary['subtotal'],
                'shipping_amount' => $cartSummary['shipping'] ?? 0,
                'total_amount' => $cartSummary['total'],
                'shipping_method' => 'delivery',
                'payment_method' => $context['payment_method'],
                'source' => 'telegram_bot',
            ]);

            foreach ($cartItems as $item) {
                OrderItem::create([
                    'order_id' => $order->id, 'product_id' => $item->product_id,
                    'product_name' => $item->product->getTranslation('name', 'ru'),
                    'quantity' => $item->quantity, 'price_at_purchase' => $item->product->price,
                    'total_price' => $item->product->price * $item->quantity,
                ]);
                $item->product->decrement('stock_quantity', $item->quantity);
            }

            DB::commit();
            Log::info('[Checkout] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–æ–º–º–∏—á–µ–Ω–∞.');

        } catch (\Exception $e) {
            DB::rollBack();
            Log::error('[Checkout] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: ' . $e->getMessage(), [
                'file' => $e->getFile(), 'line' => $e->getLine(), 'trace' => $e->getTraceAsString()
            ]);
            Telegram::sendMessage(['chat_id' => $this->chatId, 'text' => '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.']);
            return;
        }

        Log::info('[Checkout] –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
        auth()->login($user);
        $cartService->clear();
        auth()->logout();
        $this->setState(null);
        $this->setContext([]);

        if ($order->payment_method === 'card_online') {
            Log::info("[Checkout] –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã - –∫–∞—Ä—Ç–∞. –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Web App –¥–ª—è –∑–∞–∫–∞–∑–∞ #{$order->id}");

            $params_for_webapp = [
                'order_id' => $order->id,
                'amount' => $order->subtotal_amount * 100,
                'user_id' => $order->user_id,
            ];

            $webAppUrl = route('telegram.payment.show', $params_for_webapp);

            Log::info("[Checkout] –°—Å—ã–ª–∫–∞ –Ω–∞ Web App: " . $webAppUrl);

            // 3. –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç Web App
            $keyboard = \Telegram\Bot\Keyboard\Keyboard::make()->inline()->row([
                \Telegram\Bot\Keyboard\Keyboard::inlineButton([
                    'text' => 'üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ',
                    'web_app' => ['url' => $webAppUrl]
                ])
            ]);

            try {
                Telegram::deleteMessage(['chat_id' => $this->chatId, 'message_id' => $this->messageId]);
            } catch (\Exception $e) {}

            Telegram::sendMessage([
                'chat_id' => $this->chatId,
                'text' => "‚úÖ *–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{$order->order_number} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!* \n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ.",
                'parse_mode' => 'Markdown',
                'reply_markup' => $keyboard,
            ]);
    } else {
            $order->update(['status' => 'processing']);
            (new NotificationService())->sendOrderNotifications($order);
            Telegram::sendMessage([
                'chat_id' => $this->chatId,
                'text' => "‚úÖ *–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{$order->order_number} –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É!* \n\n–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è.",
                'parse_mode' => 'Markdown'
            ]);
            Log::info("[Checkout] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ —Å –æ–ø–ª–∞—Ç–æ–π –Ω–∞–ª–∏—á–Ω—ã–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω.");
        }
    }


    public function cancelCheckout(): void
    {
        $this->setState(null);
        $this->setContext([]);
        try {
            Telegram::deleteMessage(['chat_id' => $this->chatId, 'message_id' => $this->messageId]);
        } catch (\Exception $e) {}

        Telegram::sendMessage(['chat_id' => $this->chatId, 'text' => '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.']);
        (new MenuHandler($this->update))->showCart();
    }
}
