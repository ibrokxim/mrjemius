<?php
// ะคะฐะนะป: app/Telegram/Handlers/CheckoutHandler.php

namespace App\Telegram\Handlers;

use App\Models\Address;
use App\Models\Order;
use App\Models\OrderItem;
use App\Services\CartService;
use App\Services\TelegramService as NotificationService;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Telegram\Bot\Keyboard\Keyboard;
use Telegram\Bot\Laravel\Facades\Telegram;

class CheckoutHandler extends BaseHandler
{
    /**
     * ะะปะฐะฒะฝัะน ะผะฐัััััะธะทะฐัะพั ะดะปั ัะฐะณะพะฒ ะพัะพัะผะปะตะฝะธั ะทะฐะบะฐะทะฐ.
     */
    public function handle(): void
    {
        $parts = explode('_', $this->callbackData);
        $step = $parts[1] ?? null;

        switch ($step) {
            case 'start': $this->start(); break;
            case 'address': $this->handleAddressSelection($parts[2] ?? null); break;
            case 'payment': $this->handlePaymentMethod($parts[2] ?? null); break;
            case 'confirm': $this->createOrder(); break;
            case 'cancel': $this->cancelCheckout(); break;
        }
    }

    /**
     * ะจะะ 1: ะะฐัะฐะปะพ ะพัะพัะผะปะตะฝะธั. ะกัะฐะทั ะทะฐะฟัะฐัะธะฒะฐะตะผ ะฐะดัะตั.
     */
    public function start(): void
    {
        // ะกัะฐะทั ัััะฐะฝะฐะฒะปะธะฒะฐะตะผ, ััะพ ะดะพััะฐะฒะบะฐ ะบัััะตัะพะผ, ะธ ัะธััะธะผ ะบะพะฝัะตะบัั
        $this->setContext(['delivery_method' => 'delivery']);

        // ะฃะดะฐะปัะตะผ ัะพะพะฑัะตะฝะธะต ั ะบะพัะทะธะฝะพะน
        try {
            Telegram::deleteMessage(['chat_id' => $this->chatId, 'message_id' => $this->messageId]);
        } catch (\Exception $e) {}

        $this->askForAddress();
    }

    /**
     * ะจะะ 2: ะะฐะฟัะพั ะฐะดัะตัะฐ.
     */
    public function askForAddress(): void
    {
        $this->setState('checkout_awaiting_address');

        $addresses = $this->user->addresses()->latest()->take(3)->get();
        $keyboard = Keyboard::make()->inline();

        foreach ($addresses as $address) {
            $keyboard->row([Keyboard::inlineButton([
                'text' => "๐ {$address->address_line_1}, {$address->city}",
                'callback_data' => 'checkout_address_' . $address->id
            ])]);
        }
        $keyboard->row([Keyboard::inlineButton(['text' => 'โ ะฃะบะฐะทะฐัั ะดััะณะพะน ะฐะดัะตั', 'callback_data' => 'checkout_address_new'])]);

        Telegram::sendMessage([
            'chat_id' => $this->chatId,
            'text' => 'ะัะฑะตัะธัะต ัะพััะฐะฝะตะฝะฝัะน ะฐะดัะตั ะธะปะธ ัะบะฐะถะธัะต ะฝะพะฒัะน:',
            'reply_markup' => $keyboard
        ]);
    }

    /**
     * ะะฑัะฐะฑะพัะบะฐ ะฒัะฑะพัะฐ ะฐะดัะตัะฐ (ะบะพะณะดะฐ ะฝะฐะถะฐัะฐ ะบะฝะพะฟะบะฐ).
     */
    public function handleAddressSelection($addressId): void
    {
        try { Telegram::deleteMessage(['chat_id' => $this->chatId, 'message_id' => $this->messageId]); } catch (\Exception $e) {}

        if ($addressId === 'new') {
            $this->setState('checkout_awaiting_phone'); // ะกัะฐะทั ะฟัะพัะธะผ ัะตะปะตัะพะฝ
            Telegram::sendMessage(['chat_id' => $this->chatId, 'text' => 'ะะฐะฟะธัะธัะต ะฒะฐั ะบะพะฝัะฐะบัะฝัะน ะฝะพะผะตั ัะตะปะตัะพะฝะฐ:']);
        } else {
            $context = $this->getContext();
            $context['address_id'] = $addressId;
            $this->setContext($context);
            $this->askForPaymentMethod(); // ะัะปะธ ะฐะดัะตั ะฒัะฑัะฐะฝ, ััะฐะทั ะฟะตัะตัะพะดะธะผ ะบ ะพะฟะปะฐัะต
        }
    }

    /**
     * ะจะะ 3: ะะฐะฟัะพั ัะตะปะตัะพะฝะฐ (ะฒัะทัะฒะฐะตััั ะธะท ะพะฑัะฐะฑะพััะธะบะฐ ัะตะบััะพะฒะพะณะพ ะฒะฒะพะดะฐ).
     */
    public function askForPhone(): void
    {
        $this->setState('checkout_awaiting_address_text');
        Telegram::sendMessage(['chat_id' => $this->chatId, 'text' => "ะัะปะธัะฝะพ! ะขะตะฟะตัั ะฝะฐะฟะธัะธัะต ะฒะฐั ะฐะดัะตั ะฒ ัะพัะผะฐัะต:\n`ะะพัะพะด, ะฃะปะธัะฐ, ะะพะผ, ะะฒะฐััะธัะฐ`"]);
    }

    /**
     * ะจะะ 4: ะะฐะฟัะพั ัะฟะพัะพะฑะฐ ะพะฟะปะฐัั.
     */
    public function askForPaymentMethod(): void
    {
        $this->setState('checkout_awaiting_payment');

        $keyboard = Keyboard::make()->inline()->row([
            Keyboard::inlineButton(['text' => '๐ต ะะฐะปะธัะฝัะผะธ', 'callback_data' => 'checkout_payment_cash']),
            Keyboard::inlineButton(['text' => '๐ณ ะะฐััะพะน ะพะฝะปะฐะนะฝ (Payme)', 'callback_data' => 'checkout_payment_card_online']),
        ]);
        Telegram::sendMessage(['chat_id' => $this->chatId, 'text' => 'ะัะฑะตัะธัะต ัะฟะพัะพะฑ ะพะฟะปะฐัั:', 'reply_markup' => $keyboard]);
    }

    /**
     * ะะฑัะฐะฑะพัะบะฐ ะฒัะฑะพัะฐ ัะฟะพัะพะฑะฐ ะพะฟะปะฐัั.
     */
    public function handlePaymentMethod(?string $method): void
    {
        if (!$method) return;
        try { Telegram::deleteMessage(['chat_id' => $this->chatId, 'message_id' => $this->messageId]); } catch (\Exception $e) {}

        $context = $this->getContext();
        $context['payment_method'] = $method;
        $this->setContext($context);

        $this->showConfirmation();
    }

    /**
     * ะจะะ 5: ะคะธะฝะฐะปัะฝะพะต ะฟะพะดัะฒะตัะถะดะตะฝะธะต.
     */
    public function showConfirmation(): void
    {
        $this->setState(null); // ะกะฑัะฐััะฒะฐะตะผ ัะพััะพัะฝะธะต, ััะพะฑั ะฟะพะปัะทะพะฒะฐัะตะปั ะฝะต ะผะพะณ ะฒะฒะตััะธ ััะพ-ัะพ ะตัะต
        $context = $this->getContext();

        // ... (ะะดะตัั ะผะพะถะฝะพ ัะพะฑัะฐัั ะบัะฐัะธะฒะพะต ัะพะพะฑัะตะฝะธะต ัะพ ะฒัะตะผะธ ะดะฐะฝะฝัะผะธ ะทะฐะบะฐะทะฐ ะธะท ะบะพะฝัะตะบััะฐ) ...
        $text = "ะะฐะบะฐะท ะฟะพััะธ ะพัะพัะผะปะตะฝ! ะะพะถะฐะปัะนััะฐ, ะฟัะพะฒะตัััะต ะดะฐะฝะฝัะต ะธ ะฟะพะดัะฒะตัะดะธัะต.";

        $keyboard = Keyboard::make()->inline()->row([
            Keyboard::inlineButton(['text' => 'โ ะัะต ะฒะตัะฝะพ, ะพัะพัะผะธัั', 'callback_data' => 'checkout_confirm']),
            Keyboard::inlineButton(['text' => 'โ ะัะผะตะฝะฐ', 'callback_data' => 'checkout_cancel']),
        ]);
        Telegram::sendMessage(['chat_id' => $this->chatId, 'text' => $text, 'reply_markup' => $keyboard]);
    }

    /**
     * ะจะะ 6: ะกะพะทะดะฐะฝะธะต ะทะฐะบะฐะทะฐ ะฒ ะฑะฐะทะต ะดะฐะฝะฝัั.
     */
    public function createOrder(): void
    {
        $context = $this->getContext();
        $user = $this->user;

        auth()->login($user);
        $cartService = new CartService();
        $cartSummary = $cartService->getSummary();
        $cartItems = $cartService->getItems();
        auth()->logout();

        if ($cartItems->isEmpty()) {
            Telegram::editMessageText(['chat_id' => $this->chatId, 'message_id' => $this->messageId, 'text' => 'ะะฐัะฐ ะบะพัะทะธะฝะฐ ะฟัััะฐ.']);
            return;
        }

        $order = null;
        DB::beginTransaction();
        try {
            $shippingAddressId = $context['address_id'] ?? null;
            // ะัะปะธ ะฟะพะปัะทะพะฒะฐัะตะปั ะฒะฒะพะดะธะป ะฝะพะฒัะน ะฐะดัะตั
            if (isset($context['new_address_text']) && isset($context['phone_number'])) {
                // ะัะตะดะฟะพะปะฐะณะฐะตะผ, ััะพ ะฒ `new_address_text` ัะพัะผะฐั "ะะพัะพะด, ะะดัะตั"
                [$city, $addressLine1] = array_map('trim', explode(',', $context['new_address_text'], 2));

                $newAddress = Address::create([
                    'user_id' => $user->id, 'type' => 'shipping',
                    'full_name' => $user->name, // ะะตัะตะผ ะพัะฝะพะฒะฝะพะต ะธะผั
                    'phone_number' => $context['phone_number'],
                    'address_line_1' => $addressLine1, 'city' => $city,
                    'country_code' => 'UZ',
                ]);
                $shippingAddressId = $newAddress->id;
            }

            $order = Order::create([
                'order_number' => 'ORD-BOT-' . time(),
                'user_id' => $user->id,
                'shipping_address_id' => $shippingAddressId,
                'status' => 'pending', 'payment_status' => 'pending',
                'subtotal_amount' => $cartSummary['subtotal'],
                'shipping_amount' => $cartSummary['shipping'] ?? 0,
                'total_amount' => $cartSummary['total'],
                'shipping_method' => 'delivery', // ะขะตะฟะตัั ะฒัะตะณะดะฐ ะดะพััะฐะฒะบะฐ
                'payment_method' => $context['payment_method'],
                'source' => 'telegram_bot', // ะฃะบะฐะทัะฒะฐะตะผ ะธััะพัะฝะธะบ
            ]);

            foreach ($cartItems as $item) {
                OrderItem::create([
                    'order_id' => $order->id, 'product_id' => $item->product_id,
                    'product_name' => $item->product->getTranslation('name', 'ru'),
                    'quantity' => $item->quantity, 'price_at_purchase' => $item->product->price,
                    'total_price' => $item->product->price * $item->quantity,
                ]);
                $item->product->decrement('stock_quantity', $item->quantity);
            }

            DB::commit();

            // ะัะธัะฐะตะผ ะบะพัะทะธะฝั ะธ ะบะพะฝัะตะบัั
            auth()->login($user);
            $cartService->clear();
            auth()->logout();
            $this->setContext([]);

        } catch (\Exception $e) {
            DB::rollBack();
            Log::error('ะัะธะฑะบะฐ ะฟัะธ ัะพะทะดะฐะฝะธะธ ะทะฐะบะฐะทะฐ ะธะท ะฑะพัะฐ: ' . $e->getMessage());
            Telegram::editMessageText(['chat_id' => $this->chatId, 'message_id' => $this->messageId, 'text' => 'ะัะพะธะทะพัะปะฐ ะพัะธะฑะบะฐ ะฟัะธ ัะพะทะดะฐะฝะธะธ ะทะฐะบะฐะทะฐ. ะะพะฟัะพะฑัะนัะต ัะฝะพะฒะฐ.']);
            return;
        }

        // ะคะธะฝะฐะปัะฝัะต ะดะตะนััะฒะธั
        Telegram::editMessageText(['chat_id' => $this->chatId, 'message_id' => $this->messageId, 'text' => "โ ะะฐั ะทะฐะบะฐะท โ{$order->order_number} ััะฟะตัะฝะพ ัะพะทะดะฐะฝ!"]);

        if ($order->payment_method === 'cash') {
            $order->update(['status' => 'processing']);
            (new NotificationService())->sendOrderNotifications($order);
        } else {
            // ะะดะตัั ะดะพะปะถะฝะฐ ะฑััั ะปะพะณะธะบะฐ ะพัะฟัะฐะฒะบะธ ัััะปะบะธ ะฝะฐ Payme
            // ...
        }
    }

    public function cancelCheckout(): void
    {
        $this->setState(null);
        $this->setContext([]);
        try {
            Telegram::editMessageText(['chat_id' => $this->chatId, 'message_id' => $this->messageId, 'text' => 'ะัะพัะผะปะตะฝะธะต ะทะฐะบะฐะทะฐ ะพัะผะตะฝะตะฝะพ.']);
        } catch (\Exception $e) {}
    }
}
