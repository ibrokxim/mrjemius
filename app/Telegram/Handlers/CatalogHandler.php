<?php

namespace App\Telegram\Handlers;

use App\Models\Product;
use App\Models\Category;
use App\Services\CartService;
use App\Helpers\TelegramHtmlHelper;
use Telegram\Bot\Keyboard\Keyboard;
use Illuminate\Support\Facades\Log;
use Telegram\Bot\FileUpload\InputFile;
use Telegram\Bot\Laravel\Facades\Telegram;

class CatalogHandler extends BaseHandler
{
    public function handle(): void
    {
        $parts = explode('_', $this->callbackData);
        $action = $parts[0] ?? null;

        // –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        switch ($action) {
            case 'category':
                // –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä
                $categoryId = $parts[1] ?? null;
                if ($categoryId) {
                    $this->showProductCarousel($categoryId, 1, true);
                }
                break;

            case 'products':
                // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ç–æ–≤–∞—Ä–∞–º –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                $categoryId = $parts[1] ?? null;
                $page = (int)($parts[3] ?? 1);
                if ($categoryId) {
                    $this->showProductCarousel($categoryId, $page, false);
                }
                break;

            case 'addtocart':
                $productId = $parts[1] ?? null;
                if ($productId) {
                    $this->addToCart((int)$productId);
                }
                break;


            case 'back':
                if (($parts[1] ?? null) === 'to' && ($parts[2] ?? null) === 'categories') {
                    $this->backToCategories();
                }
                break;
        }
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π (–∫–∞—Ä—É—Å–µ–ª—å).
     */
    protected function showProductCarousel($categoryId, $page = 1, $isFirstPage = false): void
    {
        try {
            $category = Category::find($categoryId);
            if (!$category) {
                $this->showError('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            $products = $category->products()->where('is_active', true)->get();

            if ($products->isEmpty()) {
                $this->showEmptyCategoryMessage();
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if ($page < 1 || $page > $products->count()) {
                $page = 1;
            }

            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–≤–∞—Ä (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ = –ø–æ–∑–∏—Ü–∏—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏)
            $currentProduct = $products->skip($page - 1)->first();
            $totalProducts = $products->count();

            // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –∫ —Ç–æ–≤–∞—Ä—É
            $productName = TelegramHtmlHelper::escapeHtml($currentProduct->getTranslation('name', 'ru'));
            $caption = "<b>{$productName}</b>\n\n";

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
            if ($currentProduct->description) {
                $description = $currentProduct->getTranslation('description', 'ru');
                // –û—á–∏—â–∞–µ–º HTML –∏ –æ–±—Ä–µ–∑–∞–µ–º –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤
                $description = TelegramHtmlHelper::stripAllTags($description);
                $description = TelegramHtmlHelper::truncateText($description, 200);
                $caption .= "{$description}\n\n";
            }

            $caption .= "üí∞ –¶–µ–Ω–∞: " . TelegramHtmlHelper::formatPrice($currentProduct->price) . "\n";

            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ª–∏—á–∏–∏
            if ($currentProduct->stock_quantity > 0) {
                $caption .= "üì¶ –í –Ω–∞–ª–∏—á–∏–∏: {$currentProduct->stock_quantity} —à—Ç.";
            } else {
                $caption .= "‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏";
            }

            // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
            auth()->login($this->user);
            $keyboard = $this->buildProductKeyboard(
                new CartService(),
                $currentProduct->id,
                $categoryId,
                $page,
                $totalProducts
            );
            auth()->logout();

            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞
            $photoFile = $this->preparePhoto($currentProduct);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if ($isFirstPage) {
                // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                try {
                    Telegram::deleteMessage([
                        'chat_id' => $this->chatId,
                        'message_id' => $this->messageId
                    ]);
                } catch (\Exception $e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
                }

                Telegram::sendPhoto([
                    'chat_id' => $this->chatId,
                    'photo' => $photoFile,
                    'caption' => $caption,
                    'parse_mode' => 'HTML',
                    'reply_markup' => $keyboard
                ]);
            } else {
                // –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try {
                    Telegram::editMessageMedia([
                        'chat_id' => $this->chatId,
                        'message_id' => $this->messageId,
                        'media' => [
                            'type' => 'photo',
                            'media' => $photoFile,
                            'caption' => $caption,
                            'parse_mode' => 'HTML'
                        ],
                        'reply_markup' => $keyboard
                    ]);
                } catch (\Exception $e) {
                    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                    try {
                        Telegram::deleteMessage([
                            'chat_id' => $this->chatId,
                            'message_id' => $this->messageId
                        ]);
                    } catch (\Exception $deleteError) {
                        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —É–¥–∞–ª–µ–Ω–∏—è
                    }

                    Telegram::sendPhoto([
                        'chat_id' => $this->chatId,
                        'photo' => $photoFile,
                        'caption' => $caption,
                        'parse_mode' => 'HTML',
                        'reply_markup' => $keyboard
                    ]);
                }
            }

        } catch (\Exception $e) {
            Log::error("Telegram showProductCarousel error: " . $e->getMessage());
            $this->showError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–∞.');
        }
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
     */
    protected function addToCart(int $productId): void
    {
        try {
            $product = Product::find($productId);
            if (!$product) {
                Telegram::answerCallbackQuery([
                    'callback_query_id' => $this->update['callback_query']['id'],
                    'text' => '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!',
                    'show_alert' => true
                ]);
                return;
            }

            if ($product->stock_quantity < 1) {
                Telegram::answerCallbackQuery([
                    'callback_query_id' => $this->update['callback_query']['id'],
                    'text' => '–≠—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏!',
                    'show_alert' => true
                ]);
                return;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
            auth()->login($this->user);
            $cartService = new CartService();
            $cartService->add($productId, 1);
            auth()->logout();

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            Telegram::answerCallbackQuery([
                'callback_query_id' => $this->update['callback_query']['id'],
                'text' => "‚úÖ {$product->getTranslation('name', 'ru')} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!"
            ]);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–≤–∞—Ä, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
            $this->refreshCurrentProduct($product);

        } catch (\Exception $e) {
            Log::error("Telegram addToCart error: " . $e->getMessage());
            Telegram::answerCallbackQuery([
                'callback_query_id' => $this->update['callback_query']['id'],
                'text' => '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É.',
                'show_alert' => true
            ]);
        }
    }
    public static function showProduct(int $chatId, int $productId, ?int $messageId = null, ?string $backCallback = 'back_to_categories'): void
    {
        $product = Product::with('primaryImage')->find($productId);
        if (!$product) {
            Telegram::sendMessage(['chat_id' => $chatId, 'text' => '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.']);
            return;
        }

        $price = number_format($product->price, 0, '.', ' ');
        $text = "<b>{$product->name}</b>\n\n";
        if ($product->description) {
            $description = strip_tags($product->description);
            $maxLength = 900;
            if (mb_strlen($description) > $maxLength) {
                $description = mb_substr($description, 0, $maxLength) . '...';
            }
            $text .= $description . "\n\n";
        }
        $text .= "–¶–µ–Ω–∞: {$price} —Å—É–º";

        $keyboard = Keyboard::make()->inline()->row([
            Keyboard::inlineButton(['text' => 'üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', 'callback_data' => 'addtocart_' . $product->id . '_1'])
        ]);
        // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥. –î–ª—è –ø–æ–∏—Å–∫–∞ –æ–Ω–∞ –º–æ–∂–µ—Ç –≤–µ—Å—Ç–∏ –ø—Ä–æ—Å—Ç–æ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
        $keyboard->row([
            Keyboard::inlineButton(['text' => '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', 'callback_data' => $backCallback])
        ]);

        $params = [
            'chat_id' => $chatId,
            'parse_mode' => 'HTML',
            'reply_markup' => $keyboard,
        ];

        if ($product->primaryImage) {
            $photoUrl = asset('storage/' . $product->primaryImage->image_url);
            $params['photo'] = InputFile::create($photoUrl, $product->name);
            $params['caption'] = $text;
        } else {
            $params['text'] = $text;
        }

        if ($messageId) {
            try { Telegram::deleteMessage(['chat_id' => $chatId, 'message_id' => $messageId]); } catch (Exception $e) {}
        }

        if (isset($params['photo'])) {
            Telegram::sendPhoto($params);
        } else {
            Telegram::sendMessage($params);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Ç–æ–≤–∞—Ä –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
     */
    private function refreshCurrentProduct(Product $product): void
    {
        // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        $categoryProducts = $product->category->products()->where('is_active', true)->get();
        $currentPosition = $categoryProducts->search(function ($item) use ($product) {
                return $item->id === $product->id;
            }) + 1;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—É—Å–µ–ª—å
        $this->showProductCarousel($product->category_id, $currentPosition, false);
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞
     */
    private function buildProductKeyboard(CartService $cartService, int $productId, int $categoryId, int $currentPage, int $totalProducts): Keyboard
    {
        $keyboard = Keyboard::make()->inline();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
        $isInCart = $cartService->itemExists($productId, $this->user->id);

        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è
        $product = Product::find($productId);

        // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É –∏–ª–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–≤ –∫–æ—Ä–∑–∏–Ω–µ"
        if (!$product || $product->stock_quantity < 1) {
            $keyboard->row([
                Keyboard::inlineButton([
                    'text' => '‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏',
                    'callback_data' => 'noop'
                ])
            ]);
        } elseif ($isInCart) {
            $keyboard->row([
                Keyboard::inlineButton([
                    'text' => '‚úÖ –£–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ',
                    'callback_data' => 'noop'
                ])
            ]);
        } else {
            $keyboard->row([
                Keyboard::inlineButton([
                    'text' => 'üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É',
                    'callback_data' => 'addtocart_' . $productId
                ])
            ]);
        }

        // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ)
        if ($totalProducts > 1) {
            $navigationRow = [];

            // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" (–∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Ç–æ–≤–∞—Ä—É)
            if ($currentPage > 1) {
                $navigationRow[] = Keyboard::inlineButton([
                    'text' => '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
                    'callback_data' => "products_{$categoryId}_page_" . ($currentPage - 1)
                ]);
            }

            // –°—á–µ—Ç—á–∏–∫ —Å—Ç—Ä–∞–Ω–∏—Ü
            $navigationRow[] = Keyboard::inlineButton([
                'text' => "{$currentPage} / {$totalProducts}",
                'callback_data' => 'noop'
            ]);

            // –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥" (–∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–æ–≤–∞—Ä—É)
            if ($currentPage < $totalProducts) {
                $navigationRow[] = Keyboard::inlineButton([
                    'text' => '–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è',
                    'callback_data' => "products_{$categoryId}_page_" . ($currentPage + 1)
                ]);
            }

            $keyboard->row($navigationRow);
        }

        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
        $keyboard->row([
            Keyboard::inlineButton([
                'text' => 'üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º',
                'callback_data' => 'back_to_categories'
            ])
        ]);

        return $keyboard;
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞
     */
    private function preparePhoto($product)
    {
        if ($product->primaryImage && $product->primaryImage->image_url) {
            $localPath = storage_path('app/public/' . $product->primaryImage->image_url);
            if (file_exists($localPath)) {
                return InputFile::create($localPath, $product->name . '.jpg');
            }
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º placeholder, –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç
        return InputFile::create('https://via.placeholder.com/400x300/cccccc/666666?text=No+Image', 'placeholder.jpg');
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    private function showEmptyCategoryMessage(): void
    {
        $backButton = Keyboard::make()->inline()->row([
            Keyboard::inlineButton([
                'text' => 'üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º',
                'callback_data' => 'back_to_categories'
            ])
        ]);

        try {
            Telegram::editMessageText([
                'chat_id' => $this->chatId,
                'message_id' => $this->messageId,
                'text' => 'üì≠ –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.',
                'reply_markup' => $backButton
            ]);
        } catch (\Exception $e) {
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            Telegram::sendMessage([
                'chat_id' => $this->chatId,
                'text' => 'üì≠ –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.',
                'reply_markup' => $backButton
            ]);
        }
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
     */
    private function showError(string $message): void
    {
        $backButton = Keyboard::make()->inline()->row([
            Keyboard::inlineButton([
                'text' => 'üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º',
                'callback_data' => 'back_to_categories'
            ])
        ]);

        try {
            Telegram::editMessageText([
                'chat_id' => $this->chatId,
                'message_id' => $this->messageId,
                'text' => "‚ùå {$message}",
                'reply_markup' => $backButton
            ]);
        } catch (\Exception $e) {
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            Telegram::sendMessage([
                'chat_id' => $this->chatId,
                'text' => "‚ùå {$message}",
                'reply_markup' => $backButton
            ]);
        }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     */
    protected function backToCategories(): void
    {
        try {
            Telegram::deleteMessage([
                'chat_id' => $this->chatId,
                'message_id' => $this->messageId
            ]);
        } catch (\Exception $e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
        }

        MenuHandler::showCategories($this->chatId);
    }
}
